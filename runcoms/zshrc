# Source Prezto.
if [[ -s "$HOME/src/github.com/wryfi/prezto/init.zsh" ]]; then
  source "$HOME/src/github.com/wryfi/prezto/init.zsh"
fi

fpath=(~/.local/etc/zsh/bin "${fpath[@]}")
autoload -U compinit && compinit


# source additional rc files first so they don't shadow our fns/aliases

if [[ -d "${ZDOTDIR}/rc.d" ]]; then
  for file in $(find "${ZDOTDIR}/rc.d" -not -type d | sort); do . "$file"; done
fi



# Aliases

alias back="{ git checkout git rev-list -1 --before=\"$1\" master; };"

#alias grep='rg'

alias kl='kubectl'

unalias ls
unalias lt
alias la='lsd -lAS'
alias lg='lsd -lAS | rg'
alias ls='lsd'

alias nv="nvim"
alias nv2="$(which nvim)"
alias nv4="$(which nvim) -u ~/.vimrc_4space"
alias vim="$(which nvim)"

alias salt-push='git push && ssh admin.fre.wryfi.net "cd /srv/sdm && sudo -E git up"'

# Functions
cl () {
  pushd ~/.local/$1
}

create_postgres_db() {
  echo "database name: "
  Read db_name
  echo "database owner: "
  read db_owner
  sudo -u postgres createdb --locale=en_US.UTF-8 -E utf-8 -O $db_owner -T template0 $db_name
}

doc() {
  infile="${1}"
  outfile="${2}"
  if [[ -z $infile || -z $outfile ]]; then
    echo "must provide infile and outfile"
    return 1
  fi
  pandoc -f markdown -t docx --lua-filter=$HOME/.local/etc/pandoc/pagebreak.lua -o $outfile $infile
}

ec2() {
  local profile="$1"
  local tag="$2"
  local values="$3"
  aws ec2 --profile "${profile}" describe-instances --filters "Name=tag:${tag},Values=${values}" \
    | jq '[.Reservations[] | {instanceId: .Instances[0].InstanceId, ip: .Instances[0].PrivateIpAddress}]'
}

gith() {
  pushd ~/src/github.com/wryfi/$1
}

gitl() {
  pushd ~/src/gitlab.com/wryfi/$1
}

gitz () {
  pushd ~/src/local/$1
}

hgrep () {
  fc -Dlim "*$@*" 1
}

known-host-rm() {
  [ -n "$1" ] && [[ $1 =~ ^[0-9]+$ ]] && /usr/bin/sed -i '' "${1}d" ~/.ssh/known_hosts
}

lt() {
  lsd --tree --depth $1 ${@:2}
}

mkcd() {
  mkdir -p $1 && cd $_
}

mkvirtualenv () {
    python -m venv ${VIRTUALENV_DIR}/$1
    echo "created ${VIRTUALENV_DIR}/$1"
    . ${VIRTUALENV_DIR}/$1/bin/activate
}

odt() {
  infile="${1}"
  outfile="${2}"
  if [[ -z $infile || -z $outfile ]]; then
    echo "must provide infile and outfile"
    return 1
  fi
  pandoc -f markdown -t odt --lua-filter=$HOME/.local/etc/pandoc/pagebreak.lua -o $outfile $infile
}

pdf() {
  infile="${1}"
  outfile="${2}"
  if [[ -z $infile || -z $outfile ]]; then
    echo "must provide infile and outfile"
    return 1
  fi
  pandoc -f markdown -t pdf --pdf-engine=xelatex -V geometry=margin=1in -V colorlinks -V mainfont=Lato -H  ~/.local/etc/pandoc/customize.tex -o $outfile $infile
  echo "generated pdf: $outfile"
}

repo-sync() {
  rsync -av --exclude=.git --exclude=.gitignore --exclude=.idea $1 $2
}

rmvirtualenv () {
  if [[ $VIRTUAL_ENV = "${VIRTUALENV_DIR}/$1" ]]; then deactivate; fi
  rm -rf ${VIRTUALENV_DIR}/$1
}

watchpdf() {
  infile="${1}"
  outfile="${2}"
  fswatch -o "$infile" -0 | xargs -0 -n1 -I{} pandoc -f markdown -t pdf \
  --pdf-engine=xelatex -H ~/.local/etc/pandoc/customize.tex -o $outfile $infile
}

workon() {
    . ${VIRTUALENV_DIR}/$1/bin/activate
}

zv () {
  nvim $ZDOTDIR/$1
}

